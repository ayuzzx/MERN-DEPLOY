{"ast":null,"code":"import axios from \"axios\";\nexport const placeOrder = (token, subtotal) => async (dispatch, getState) => {\n  dispatch({\n    type: 'PLACE_ORDER_REQUEST'\n  });\n  const currentUser = getState().loginUserReducer.currentUser;\n  const cartItems = getState().cartReducer.cartItems;\n\n  try {\n    const response = await axios.post('/api/orders/placeorder', {\n      token,\n      subtotal,\n      currentUser,\n      cartItems\n    });\n    dispatch({\n      type: 'PLACE_ORDER_SUCCESS'\n    });\n    console.log(response);\n  } catch (error) {\n    dispatch({\n      type: 'PLACE_ORDER_FAILED'\n    });\n    console.log(error);\n  }\n};\nexport const getUserOrders = () => async (dispatch, getState) => {\n  const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: 'GET_USER_ORDERS_REQUEST'\n  });\n\n  try {\n    const response = await axios.post('/api/orders/getuserorders', {\n      userid: currentUser._id\n    });\n    console.log(response);\n    dispatch({\n      type: 'GET_USER_ORDERS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_USER_ORDERS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const getAllOrders = () => async (dispatch, getState) => {\n  const currentUser = getState().loginUserReducer.currentUser;\n  dispatch({\n    type: 'GET_ALLORDERS_REQUEST'\n  });\n\n  try {\n    const response = await axios.get('/api/orders/getallorders');\n    console.log(response);\n    dispatch({\n      type: 'GET_ALLORDERS_SUCCESS',\n      payload: response.data\n    });\n  } catch (error) {\n    dispatch({\n      type: 'GET_ALLORDERS_FAILED',\n      payload: error\n    });\n  }\n};\nexport const deliverOrder = orderid => async dispatch => {\n  try {\n    const response = await axios.post('/api/orders/deliverorder', {\n      orderid\n    });\n    console.log(response);\n    alert('Order Delivered');\n    const orders = await axios.get('/api/orders/getallorders');\n    dispatch({\n      type: 'GET_ALLORDERS_SUCCESS',\n      payload: orders.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["C:/Users/ayush/Downloads/Compressed/awesomepizza-master/awesomepizza-master/client/src/actions/orderActions.js"],"names":["axios","placeOrder","token","subtotal","dispatch","getState","type","currentUser","loginUserReducer","cartItems","cartReducer","response","post","console","log","error","getUserOrders","userid","_id","payload","data","getAllOrders","get","deliverOrder","orderid","alert","orders"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nexport const placeOrder=(token , subtotal)=>async (dispatch , getState)=>{\n\n\n      dispatch({type:'PLACE_ORDER_REQUEST'})\n      const currentUser = getState().loginUserReducer.currentUser\n      const cartItems = getState().cartReducer.cartItems\n      \n      try {\n\n         const response = await axios.post('/api/orders/placeorder' , {token , subtotal , currentUser , cartItems})\n         dispatch({type:'PLACE_ORDER_SUCCESS'})\n         console.log(response);\n          \n      } catch (error) {\n        dispatch({type:'PLACE_ORDER_FAILED'})\n          console.log(error);\n          \n      }\n\n\n\n}\n\n\nexport const getUserOrders=()=>async (dispatch,getState)=>{\n\n  const currentUser = getState().loginUserReducer.currentUser\n  dispatch({type:'GET_USER_ORDERS_REQUEST'})\n  \n  try {\n      const response = await axios.post('/api/orders/getuserorders' , {userid : currentUser._id})\n\n      \n      console.log(response);\n      \n      dispatch({type:'GET_USER_ORDERS_SUCCESS' , payload : response.data})\n  } catch (error) {\n      dispatch({type:'GET_USER_ORDERS_FAILED' , payload : error})\n  }\n\n}\n\nexport const getAllOrders=()=>async (dispatch,getState)=>{\n\n  const currentUser = getState().loginUserReducer.currentUser\n  dispatch({type:'GET_ALLORDERS_REQUEST'})\n  \n  try {\n      const response = await axios.get('/api/orders/getallorders')\n\n      \n      console.log(response);\n      \n      dispatch({type:'GET_ALLORDERS_SUCCESS' , payload : response.data})\n  } catch (error) {\n      dispatch({type:'GET_ALLORDERS_FAILED' , payload : error})\n  }\n\n}\n\nexport const deliverOrder=(orderid)=>async dispatch=>{\n\n\n\n    try {\n      const response = await axios.post('/api/orders/deliverorder' , {orderid})\n      console.log(response);\n      alert('Order Delivered')\n      const orders = await axios.get('/api/orders/getallorders')\n      dispatch({type:'GET_ALLORDERS_SUCCESS' , payload:orders.data})\n    } catch (error) {\n      console.log(error);\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}